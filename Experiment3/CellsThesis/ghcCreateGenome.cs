using Grasshopper;
using Grasshopper.Kernel;
using Grasshopper.Kernel.Data;
using Grasshopper.Kernel.Types;
using Rhino.Geometry;
using System;
using System.Collections.Generic;

namespace CellsThesis
{
    public class ghcCreateGenome : GH_Component
    {
        /// <summary>
        /// Initializes a new instance of the MyComponent1 class.
        /// </summary>
        public ghcCreateGenome()
          : base("Create Genome", "CreateGenome",
              "This component allows you to manually create a genome",
               "Thesis", "Experiment 3")
        {
        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddGenericParameter("DNA", "DNA", "Input a tree of DNA formatted as {material,face,gene}, format must match the tree dimsnsions in the simulation -> see faceCount, materialCount and geneStructure", GH_ParamAccess.tree);
            pManager.AddIntegerParameter("number faces", "number faces", "numberfaces", GH_ParamAccess.item);
            pManager.AddIntegerParameter("number Materials", "number materials", "number materials", GH_ParamAccess.item);
            pManager.AddIntegerParameter("number genes", "number genes", "number genes", GH_ParamAccess.item);
        }

        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddGenericParameter("Out Genome", "Out Genome", "This genome is generated by the input rules", GH_ParamAccess.item);
        }


        protected override void SolveInstance(IGH_DataAccess DA)
        {
;           

            GH_Structure<IGH_Goo> iDNA;
            int numberFaces = 0;
            int numberMaterials = 0;
            int numberGenes = 0;

            DA.GetDataTree(0, out iDNA);
            DA.GetData(1, ref numberFaces);
            DA.GetData(2, ref numberMaterials);
            DA.GetData(3, ref numberGenes);



            int[,,,] convertedDNA = new int[numberGenes,3,numberFaces,numberMaterials];

            for (int i = 0; i<numberGenes;i++)
                for (int j = 0; j<numberFaces;j++)
                    for (int k = 0; k<numberMaterials; k++)
                        for(int p = 0;p<3;p++)
                        {
                            int item = 0;
                            GH_Path path = new GH_Path(j, k, i);
                            IGH_Goo outItem = iDNA.get_DataItem(path, p);

                            outItem.CastTo<int>(out item);

                            convertedDNA[i, p, j, k] = item;
                        }
            Genome outgenome = new Genome(convertedDNA);

            DA.SetData(0, outgenome);




        }

  
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                //You can add image files to your project resources and access them like this:
                // return Resources.IconForThisComponent;
                return null;
            }
        }

        /// <summary>
        /// Gets the unique ID for this component. Do not change this ID after release.
        /// </summary>
        public override Guid ComponentGuid
        {
            get { return new Guid("4800D546-9B92-47CC-AA1D-5586B403EE57"); }
        }
    }
}